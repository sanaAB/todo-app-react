{"version":3,"sources":["components/NewTodoInput/NewTodoInput.js","components/EditInput/EditInput.js","components/ToDo/ToDo.js","components/TodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoInput","addTodo","useState","inputValue","setInputValue","saveTodo","length","alert","newTodo","id","Date","now","Math","random","toString","title","isDone","type","value","required","onKeyDown","keyCode","onChange","target","onClick","className","EditInput","handleIsEdit","editTodo","ToDo","deleteTodo","completedTodo","isEdit","setIsEdit","newEditState","editedState","checked","e","TodoList","todos","map","todo","index","App","JSON","parse","localStorage","getItem","stateTodos","setState","save","newState","setItem","stringify","prevState","filter","console","log","doneTasks","placeholder","todoId","editedId","editedTitle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.630b253c.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport \"./NewTodoInput.css\"\r\n\r\nfunction NewTodoInput({addTodo}){\r\n\tconst[inputValue, setInputValue] = useState( \" \");\r\n\r\n\tfunction handleOnKeyDown({ keyCode}){\r\n\t\tif(keyCode === 13){\r\n\t\t\tsaveTodo();\r\n\t\t}\r\n\t}//end of handleOnKeyDown\r\n\r\n\tfunction handleInputValue({target}){\r\n\t\tsetInputValue(target.value);\r\n\t}\r\n\r\n\tfunction saveTodo(){\r\n\r\n\t\tif(inputValue.length < 2){alert(\"Cannot add an empty task, please provide a valid input\")}\r\n\t\telse\r\n{\t\tconst newTodo = {\r\n\t\t\t\t\tid: (Date.now() + Math.random()).toString(),\r\n\t\t\t\t\ttitle: inputValue,\r\n\t\t\t\t\tisDone: false\r\n\t\t\t\t  };\r\n\t\t\t\t  addTodo(newTodo);\r\n\t\t\t\t  setInputValue(\" \");}\r\n\r\n\t}//end of saveTodo\r\n\r\n    return (\r\n        <div id=\"todoForm\">\r\n\t\t\t\t<input \r\n\t\t\t\ttype=\"text\" \r\n\t\t\t\tid=\"todoInput\" \r\n\t\t\t\tvalue= {inputValue}\r\n\t\t\t\trequired\r\n\t\t\t\tonKeyDown={handleOnKeyDown}\r\n\t\t\t\tonChange= {handleInputValue}\r\n\t\t\t\t></input>\r\n\r\n\t\t\t\t<button onClick={saveTodo} className= \"button_style\">  New todo</button>\r\n          </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default NewTodoInput;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t// function addNewTodo({ keyCode, target }) {\r\n\t// \tif (keyCode === 13) {\r\n\t// \t  const newTodo = {\r\n\t// \t\tid: (Date.now() + Math.random()).toString(),\r\n\t// \t\ttitle: target.value,\r\n\t// \t\tisDone: false\r\n\t// \t  };\r\n\t// \t  addTodo(newTodo);\r\n\t// \t  target.value = \"\";\r\n\t// \t}\r\n\t// }\t","import React, {useState} from \"react\";\r\n\r\n\r\n\r\nexport default function EditInput({title, id, handleIsEdit, editTodo}){\r\n    const [inputValue, setInputValue] = useState(title);\r\n\r\n    function handleSaveBtn(){\r\n        handleIsEdit(false);\r\n        editTodo(id, inputValue);\r\n    }\r\n    function handleInputValue({target}){\r\n        setInputValue(target.value);\r\n    }\r\n    return(\r\n        <div>\r\n            <input  onChange = {handleInputValue} value = {inputValue}/>\r\n            <button onClick={handleSaveBtn}>Submit changes</button>\r\n        </div>\r\n\r\n    );\r\n}","import React, {useState} from \"react\"  ;\r\nimport EditInput from \"../EditInput/EditInput\";\r\nimport \"./ToDo.css\";\r\n\r\nfunction ToDo({title, isDone, deleteTodo, id, completedTodo, editTodo}){\r\n    const [isEdit, setIsEdit] = useState(false);\r\n\r\n    function newEditState(editedState){\r\n        setIsEdit(editedState);\r\n    }\r\n    return (\r\n    <div>\r\n        {isEdit ? (\r\n        <EditInput  title={title}\r\n                     id={id}\r\n                     handleIsEdit = {newEditState}\r\n                     editTodo= {editTodo}\r\n                     id= {id} />\r\n      ) : \r\n   \r\n      (\r\n             <li className = {`li_style ${isDone ? \"checked-todo\" : \"li_style\"}`}>\r\n            <div className='buttons'>\r\n\t\t\t<input type='checkbox' checked = {isDone} onChange={() => completedTodo(id)}/>\r\n\t\t  \t<p  id=\"p\">{title}</p>\r\n\t\t    </div>\r\n\t\t    <div className=\"delete_Btn\">\r\n                <button onClick ={() => deleteTodo(id)}>Delete</button>\r\n                <button onClick= {(e) => newEditState(true)} >Edit</button>\r\n\t\t    </div>\r\n        </li>\r\n    )}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React from \"react\";\r\nimport ToDo from \"../ToDo/ToDo\";\r\n\r\n\r\nfunction TodoList({todos, deleteTodo, completedTodo, editTodo }){\r\n    return (\r\n        <ul>\r\n            {todos.map((todo, index) => (\r\n                 <ToDo \r\n                    key={index} \r\n                    title={todo.title} \r\n                    isDone = {todo.isDone}\r\n                    id = {todo.id}\r\n                    deleteTodo = {deleteTodo}\r\n                    completedTodo = {completedTodo}\r\n                    editTodo= {editTodo}\r\n                />\r\n          ))}\r\n            \r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default TodoList; ","//import logo from './logo.svg';\nimport React, {useRef, useState} from \"react\";\nimport './App.css';\nimport NewTodoInput from \"./components/NewTodoInput/NewTodoInput\";\nimport TodoList from \"./components/TodoList/TodoList\";\n//import ToDo from \"./components/ToDo/ToDo\";\n\n\nfunction App() {\n  const placeholderTxt = \"passed using props\";\n\n  \n  const[stateTodos, setState] = useState(JSON.parse(localStorage.getItem(\"todos\")) || []);\n  //const prevState = useRef();\n\n\n  function handleDelete(todoId){\n    save(stateTodos.filter(({ id }) => id !== todoId));\n  }\n\n  function addNewTodo(newTodo){\n    const newTodos = [newTodo, ...stateTodos];\n    save(newTodos);\n  }\n\n  function handleCompleteTodo(todoId) {\n    const newTodos = stateTodos.map((todo) => {\n      if (todo.id === todoId)\n        {     \n        todo.isDone = !todo.isDone;\n      }\n      return todo;\n    });\n\n    save(newTodos);\n  }\n\n  function clearAllBtn(){\n    alert(\"Are you sure you want to clear all of your todos?\");\n    save([]);\n  }\n  \n  function doneTasks()\n\t{\t\n    const prevState = stateTodos;\n    //setState((stateTodos.filter((todo) => todo.isDone)));\n    save(stateTodos.filter((todo) => todo.isDone));\n    console.log(prevState);\n    //save(prevState);\n\t}\n\n  function save(newState) {\n    setState(() => {\n      localStorage.setItem(\"todos\", JSON.stringify(newState));\n      return newState;\n    });\n    }\n\n    function handleEdit(editedId, editedTitle){\n      const newTodos = stateTodos.map((todo) =>\n      {\n        if(todo.id === editedId){\n          todo.title = editedTitle;\n        }\n        return todo;\n      }\n      \n      );\n      save(newTodos);\n    }\n\n  return (\n    <div className=\"App\">\n        <h3 className=\"h_style\">To Do List App</h3>\n        <main>\n        <div className= \"form__div\">\n          <button  id= \"ClearAllBtn\" onClick = {() => clearAllBtn()}>Clear all </button> \n          <button  id= \"ClearAllBtn\" onClick = {() => doneTasks()}>Done tasks </button> \n          <NewTodoInput placeholder = {placeholderTxt}  addTodo= {addNewTodo}/>\n        </div>\n        <TodoList todos={stateTodos} deleteTodo= {handleDelete} \n         completedTodo= {handleCompleteTodo}\n         editTodo={handleEdit}/>\n      </main>\n      <footer>copyright @2021</footer>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}